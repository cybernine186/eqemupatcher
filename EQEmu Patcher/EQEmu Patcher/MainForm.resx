<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAGAAA
        ACgAAAAwAAAALQAAACEAAAAPAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQABAQECAAAAAwAAAAIAAAACAAAAAgAAAAwAAAA1AAAAdAAA
        AKoAAADMAAAA3gAAAOQAAADiAAAA1wAAAL4AAACSAAAAVAAAABwAAAAEAAAAAgAAAAIAAAACAAAAAgEB
        AQQCAwMBAgMEAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBsbAA8YGR8MFBSLBA4XngAGFJwACBWdAAgStwAG
        DuoABQ3+AAUM/wAFDf8DCQ3/BgoL/wECAv8AAAD/AAAA/wAAAP8AAgT4AAYQ0gAIFaQACRacAAcVnAEI
        FpwHEBSeEBoZZw8YGAoOFxgAAAAAAAAAAAAAAAAAAAAAAAAAAAAdLy8AHCwrBB4vL2kiVGzzF16a/wM3
        f/8AMnv/ADJ8/wAyfP8EO4T/HGWc/yZIVP8nLCv/Hx8e/xkZGP8LCwr/AAcP/wAnWv8AM3z/ADF6/wAx
        ev8HQof/HmOU/x48RsgfLy0qITU2ABwtLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJDw8AAgEAOBcr
        L+A7msL/LJXa/wtWqv8FSqD/CVOn/yWM1f8te6D/Nz49/0lIRv9JSUb/RUVC/xshJv8ANG3/AEmg/wRK
        oP8FSqH/EWOz/zSj5P8udJD0FyQiSxYoKQAsSEkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ADUAAADPAgEA/xxMYv81ruz/LKHj/yeZ3f8kmNz/JJzg/xdKZ/4/PTntTk5K4k5OSuVCQDzzDTVP/gdt
        uv8Labj/IpDX/yea3v8yqev/NKLa/xAoMvoAAACEAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAiAAAAxQAAAP8BAAD/CSIv/x+R0v8kn+T/K6Xo/yKd4f8Zk9n/DUJh6iUeGElTU1AfU1NPIygi
        HFcMRGXvFZDX/x+Z3v8qpej/K6bo/y6r7/8jfKz/BAkL/wAAAPYAAABvAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAACQAAAJ4AAAD/AAAA/xkXFf8UKjb/EobI/xmX3v8mpOj/H53i/xiU2v8KQV/hAAAAIQEB
        AQAAAAAAAAAAMAdGa+0Qjdb/HJrg/yel6f8lo+f/I6Pp/xVdhP8DAgL/AAAA/wAAAOcAAABBAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABVAAAA9AAAAP8SEhL/OTg1/xcuOv8Phsn/Fpjg/yKk6f8cneT/FZTb/wk+
        W9wAAAAcAQEBAAAAAAAAAAA8B0128w2O2f8am+L/I6Xq/x6f5v8YmuP/EE5x/x0bGf8EBAT/AAAA/wAA
        ALYAAAAQAAAAAAAAAAAAAAEAAAABEAAAALwAAAD/BgcH/zExMP8+PTv/Fi06/w2Gy/8TmOH/HqTq/xid
        5f8Sk9v/BzlU1gAAABcBAQEAAAAAFgACBoUETYD8CIXU/xia4/8fpev/F5rk/w6S3v8MSGr/MjAt/xsb
        Gv8AAAD/AAAA+AAAAFgAAAAAAAAAAAAAAQAAAAFKAAAB9QAAAP8aGxv/Ojo6/zs5OPsTLDn3CoXL/xCY
        4/8bpOz/E5vl/w2Q2f8GNlDQAAAAIAABA1YADybDAChj+wBGn/8DaL//F53m/yWy7/8qu+7/EZvh/wdI
        b/8vLSz/MDEx/wYHB/8AAAD/AAABsQAAAQkAAAAAAAIEAQAAAZIAAAD/BAQF/ygoKP81NTT/NDIwyQcm
        OMcIhcz/Dpjk/xej7P8NleH/B4bT/wMuSuYABxW4ACJV9AA5jv8AQaP/A1Ku/xuX2f851fj/SvD+/1H7
        //9B3PH/HGN7/igoJ/8yMjL/ExQU/wAAAP8AAAHpAAAALwAAAAAAAAEUAAAByAAAAf8KCwz/Jicm/yss
        Kv4rJyRyAiU5sQeFzP8Ll+X/FaTu/wuN3f8AYrv/ADiH/wAzhP8AQKL/AUur/whuxf8fq+v/ROz+/0/7
        /v9L5+z/RbzB+T+Okco1XV6AKy0r1SoqKf8ZGxr/AQEC/wAAAf4AAAFhAAACAAECAzABAQLlAAEC/xAR
        Ev8gISD/ISIh6h4XETUBJDmxBYTN/wmX5v8TpO//EJzp/wRkvv8BRaf/AUep/wRkv/8Nj9//E6Tv/xyy
        9v8sxO7/PKWs8zx/gq82WlxWMTo6FBTD1wAhIiGUICEg/xsdHP8EBgb/AAEC/wABAo0BAQQAAQIDSQID
        BPMCBAX/DhAQ/xQWFv8SFRXODQAAGQIkObMEhc7/CJjn/xCk8P8RpvH/Ibnx/zPJ6v8xyOz/H7rz/xKo
        8v8Poe7/Bond/wVqt/8IHzfgBQQEVQAAAAUAAAAAFRcXABQWFmcTFhb/ExUV/wUHCP8BAgP/AQIDqQEB
        AQQDBAVXAwQF+AMEBf8HCQn/BwkK/wcJCr0CAAAPAiU5tASFz/8HmOj/DqPw/xWu9P8y2/7/SPn9/0n8
        /f9B9P//Mdr7/xu39P8Ge9H/AEis/wA3jv8AHUzvAAcSlAAAACYHCQoABggJUgcJCfsHCQr/BAYH/wID
        BP8CBAS2AwQECAMFBVYDBQX3BQYG/wMEBP8BAQL/AQICvgAAABABJTm0BIXO/wiY6P8Po+//EKXx/xWs
        8P8lhJn1Opug7EDX4P9E9v7/P/H//yzL8/8Pfcv/AUmt/wA/o/8AL3f+ABMx1AACBV8CAgJhAgID+wEC
        A/8DBQX/AwUG/wMFBbYCAwMIBgcHRwYHB/IGBwf/AwMD/wAAAP8AAADQAAAAGgIlObMFhc7/CJjn/xGk
        7/8Lmuj/Bo3b/wIyTdElLSlGNnBznzymrvBD4On/Rvj//z/s/f8ns+T/CmS7/wBEqP8APJf/ACRb9AAJ
        FdwAAAD+AQEB/wUGBv8FBgf/BQYHqAECAgQHBwctCAgI5AkJCf8EBQX/AAAA/wAAAOsAAAA4AiU5sQWE
        zf8KmOb/E6Tu/wuZ5/8GjNn/AzNOzwAAABI0KScFMk5PRDd3fLI/sbn3Rufw/0j4//8xzvb/DX3P/wFO
        rv8AQqX/ADOC/wATNv8BAgb/BgYG/wgICP8HCAiLCQsKAAgICBEJCQnGCgoK/wkJCP8AAQD/AAAA/gAA
        AHcCJTmxCIXM/wyY5f8Vo+3/DZnm/wiN2P8DM07PAAAAEgEBAQAxRUUALS4tDDNUVlY5f4PENbLI/Sa+
        +P8ZqfH/EZLg/wlpwP8MZrv/FHfB/xRHYv8NEA//CQkI/QgJCF4JCQgAHBwaAAoKCY4MDAv/DAwM/wIC
        Av8AAAD/AAAAzQIhMsoJhcz/Dpfj/xij7P8PmeX/Co3X/wQzTc8AAAASAAAAAAAAAAABAAAAAAAAAwcH
        CXYGPm36Bn3Q/xCV4f8ap+7/LMD1/zrV/v82stD/HjxC/w4ODv8LCwrnCQoJKwoKCQALCwsACgsKRQwM
        DPMODg7/BwcH/wAAAP8AAAD8Axso+AuGzP8RmOP/HKTs/xOZ4/8Njdb/BTNNzwAAABIBAQEAAAAAAAAA
        AAMAAgVkACJL7QBIn/8CXbb/FZbg/y299f9A2///PcTj/yFLU/8PEA//DQwM/wsLC60HBwcHCgoJAAoK
        CgAKCgoNDQ0Ntw4ODv8ODg7/AwMD/wAAAP8DGif/DofL/xOY4f8fpOr/Fpni/w+N1P8FM0zOAAAAEgAA
        AAAAAAADAAIFYgAhSewASJ3/AlOt/xOE0v8stfH/Qtj//0LP8f8nYG3/DhER/w8PD/8NDQ32DAwMUg0N
        DQADAwIABgYGABAQEAAODg5OERER8hMTE/8ODg7/AQAA/wMaJ/8Rh8r/F5jg/yKk6f8Xl9//D4nR/wUv
        SNgAAABDAAAAMgACBGsAIUfrAEic/wJUrP8Vg9D/K7Dv/0TT/f9I1/r/L3mK/xAWF/8SEhL/EhIS/xAQ
        ELANDQ0MDQ0NAAAAAAAAAAAAERERABAQEAYUFBSWFxcX/xkZGf8ODQz/BRso/xSHyf8amN//JqTo/xaO
        1/8Darv/ATRw/AAcR+4AHUjtACRX9wBFl/8CVKv/FoPO/yur6/9Ezvr/Tdv+/ziRpv8VISL/FhUV/xgY
        GP8VFRXkEhISORQUFAAMDAwAAAAAAAAAAAAAAAAAFhYWABUVFRwZGRm/Gxsb/xsaGf8LIC3/EoPF/xqU
        2/8ppOf/IZbc/wZZrv8APZn/ADuX/wA7lv8APJj/A02k/xeAy/8rpuj/Q8j4/1Dc//9Bp8H/HjI1/xoZ
        Gf8dHR3/Ghoa9BgYGGYAAAAAExMTAAAAAAAAAAAAAAAAAAAAAAAcHBwAGhoaABwcHCsaGRjNDg8U/wEn
        U/8EaLX/IZjX/zu47P88uez/NKrh/ymQzf8mh8b/JofG/yiNyv8ypNz/O7jr/0TF9P9T2///SbrX/ylI
        Tv8hISH/ISAg/x4eHvUcHBx5FxcXBRkZGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAANAMR
        IccKP3D/IHy6/0G33P9l8Pr/bvz//278//9u/f//b/7//2/+//9v/f//bv7//279//9u/f//ZPD//1DI
        6P8vWmT/JScm/yUlJf8iIiLqHx8fbRwcHAYdHR0AAAAAAAAAAAAAAAAAAAAAAAAAAAALEhIACQ8QBwwS
        EmAVKjDdMHOK/02wwv9ey8//ZNPT/2PQ0P9i0NH/Y9HS/2PR0v9j0dL/Y9HS/2PR0v9j0tL/Y9HS/2PS
        0v9fzNH/OHF8/ycrK/8oKCj8JiYmwiMjI0QdHR0CISEhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgm
        JwAVIiMRIjY3VzZZW2dCcXFlQm5tZUBqa2U/aGlnN1JTnjRHR+U0RUX9NUVG/zVFRv81Rkb/NkdH/zZG
        R/81Rkb/NUZG/zRERf8tNDP2KioqxygoKGomJiYUKysrAB0dHQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMXFwAdDw8EKSQkKSwqKmYuLCyfLi0twy8u
        LtcvLi7eLy4u3C8uLs8uLS20LSwshSwrK0cqKioSlI6OACUlJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALS0tACsr
        KwIuLi4OLy8vHC4uLiMuLi4gLi4uFS4uLgcpKSkALCwsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//AP//AAAAfwAAAH8AAAD/gAAB/wAAAP4AAAB8ABgAfAAYADgAEAA4AA
        AAEAAAABAAAAAQAAAIEAAAGAAAAAgAAAAAAAAAAAAAAAAQABgAGAAcABgAGAAYABAAPAAAADwAAAB+AA
        AA/wAAAP4AAAH8AAAD/AAAD//4AD///wH/8=
</value>
  </data>
</root>